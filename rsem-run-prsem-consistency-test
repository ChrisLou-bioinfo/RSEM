#!/usr/bin/env perl

use Getopt::Long;
use Pod::Usage;
use File::Basename;
use FindBin;
use lib $FindBin::RealBin;
use rsem_perl_utils qw(runCommand collectResults showVersionInfo);

use Env qw(@PATH);
@PATH = ($FindBin::RealBin, "$FindBin::RealBin/sam", @PATH);

use strict;
use warnings;

#const
my $status = 0;
my $bowtie_path = "";
my $nThreads = 1;
my $quiet = 0;
my $help = 0;
my $keep_intermediate_files = 0;
my $version = 0;

my ($refName, $sampleName, $sampleToken, $temp_dir, $stat_dir, $imdName, $statName) = ('') x 7;

my $chipseq_target_read_files  = '';
my $chipseq_control_read_files = '';
my $chipseq_peak_file          = '';
my $mappability_bigwig_file    = '';
my $partition_model            = 'pk';
my $chipseq_read_files_multi_targets = ''; ## read files for multiple targets
                                           ## delimited by comma
my $chipseq_bed_files_multi_targets = '';  ## BED files for multiple targets
                                           ## delimited by comma

GetOptions("keep-intermediate-files" => \$keep_intermediate_files,
	   "temporary-folder=s" => \$temp_dir,
	   "bowtie-path=s" => \$bowtie_path,
	   "p|num-threads=i" => \$nThreads,
	   'chipseq-target-read-files=s' => \$chipseq_target_read_files, 
	                                      ## delimited by comma if more than one
	   'chipseq-control-read-files=s' => \$chipseq_control_read_files, 
	                                      ## delimited by comma if more than one
     'chipseq-read-files-multi-targets=s' => \$chipseq_read_files_multi_targets,
                                          ## delimited by comma
     'chipseq-bed-files-multi-targets=s' => \$chipseq_bed_files_multi_targets,
                                         ## delimited by comma
	   'chipseq-peak-file=s' => \$chipseq_peak_file,
	   'mappability-bigwig-file=s'  => \$mappability_bigwig_file,
	   'partition-model=s' => \$partition_model,
	   "version" => \$version,
	   "q|quiet" => \$quiet,
	   "h|help" => \$help) or pod2usage(-exitval => 2, -verbose => 2);

pod2usage(-verbose => 2) if ($help == 1);
&showVersionInfo($FindBin::RealBin) if ($version == 1);

#check parameters and options
{
  my $msg = '';
  if ( $mappability_bigwig_file eq '' ) {
    $msg = '--mappability-bigwig-file <file> is needed for calculating' .
           ' mappabilities in pRSEM';
  } else {
    if ( ( $chipseq_peak_file eq '' ) && 
         ( ( $chipseq_target_read_files eq ''  ) || 
           ( $chipseq_control_read_files eq '' ) || 
           ( $bowtie_path eq '' ) ) && 
         ( ( $chipseq_read_files_multi_targets eq '' ) ||
           ( $bowtie_path eq '' ) ) &&
         ( ( $chipseq_bed_files_multi_targets eq '' ) ||
           ( $bowtie_path eq '' ) )
       ) {
      $msg = "please define one set of the following options to run pRSEM:\n" .
             "1. --chipseq-peak-file <file>\n" .
             "2. --chipseq-target-read-files <file> and\n" .
             "   --chipseq-control-read-files <file> and\n" .
             "   --bowtie-path <path>\n" .
             "3. --chipseq-read-files-multi-targets <files> and\n" .
             "   --bowtie-path <path>\n" .
             "4. --chipseq-bed-files-multi-targets <files> and\n" .
             "   --bowtie-path <path>\n";
    }

    my @prsem_partition_models = ( 
       'pk', 'cmb_lgt',
      #'pk_lgtnopk', 
      #'lm3', 'lm4', 'lm5', 'lm6',
      #'nopk_lm2pk', 'nopk_lm3pk', 'nopk_lm4pk', 'nopk_lm5pk',
      #'pk_lm2nopk', 'pk_lm3nopk', 'pk_lm4nopk', 'pk_lm5nopk',
    );

    my %prtmdl2one = ();
    foreach my $prtmdl (@prsem_partition_models) {
      $prtmdl2one{$prtmdl} = 1;
    }

    if ( exists $prtmdl2one{$partition_model} ) {
      if ( ( $partition_model eq 'cmb_lgt' ) && 
           ( ( $chipseq_read_files_multi_targets eq '' ) &&
             ( $chipseq_bed_files_multi_targets  eq '' ) ) ){
        $msg = 'either --chipseq-read-files-multi-targets <files> or ' .
               '--chipseq-bed-files-multi-targets <files> needs to be ' .
               "defined for pRSEM's partition model: '$partition_model'";
      } elsif ( ( $partition_model ne 'pk' ) && 
                ( $partition_model ne 'cmb_lgt' ) &&
                ( ( $chipseq_target_read_files eq ''  ) || 
                  ( $chipseq_control_read_files eq '' ) || 
                  ( $bowtie_path eq '' ) ) ){
        $msg = '--chipseq-target-read-files <file> and ' .
               '--chipseq-control-read-files <file> and ' .
               '--bowtie-path <path> need to be defined for ' .
               "pRSEM's partition model: '$partition_model'";
      }
    } else {
      my $s_prt_mdls = join(', ', @prsem_partition_models);
      $msg = "\n--partition-model <string> must be one of [$s_prt_mdls]\n" .
             "pRSEM consistency test only supports the above partition models";
    }
  }

  if ( $msg ne '' ) {
    pod2usage(-msg => "$msg\n", -exitval => 2, -verbose => 2);
  }

  if ( ( $partition_model ne 'cmb_lgt' ) && 
       ( ( $chipseq_read_files_multi_targets ne '' ) || 
         ( $chipseq_bed_files_multi_targets  ne '' ) ) ) {
    print "\nCombining signals from multiple sources, partition model is set to 'cmb_lgt'\n\n";
    $partition_model = 'cmb_lgt';
  }
}


$refName = $ARGV[0];
$sampleName = $ARGV[1];

my $pos = rindex($sampleName, '/');
if ($pos < 0) { $sampleToken = $sampleName; }
else { $sampleToken = substr($sampleName, $pos + 1); }

if ($temp_dir eq "") { $temp_dir = "$sampleName.temp"; }
$stat_dir = "$sampleName.stat";

if (!(-d $temp_dir) && !mkdir($temp_dir)) { print "Fail to create folder $temp_dir.\n"; exit(-1); }
if (!(-d $stat_dir) && !mkdir($stat_dir)) { print "Fail to create folder $stat_dir.\n"; exit(-1); }

$imdName = "$temp_dir/$sampleToken";
$statName = "$stat_dir/$sampleToken";


if ($bowtie_path ne "") { $bowtie_path .= "/"; }

my $command = "";

{
  $command = "$FindBin::RealBin/pRSEM/prsem-consistency-test " .
             " --num-threads $nThreads " .
             " --mappability-bigwig-file $mappability_bigwig_file " .
             " --partition-model $partition_model ";

  ##  ChIP-seq peak file from single source
  if ( $chipseq_peak_file ne '') { ## only for partition model pk
                                   ## need to add sanity check!!
    $command .= " --chipseq-peak-file $chipseq_peak_file";
  } elsif ( $partition_model eq 'cmb_lgt' ) {  ## multi-sources
    if ( $chipseq_bed_files_multi_targets ne '' ) { ## use bed over read
      $command .= ' --chipseq-bed-files-multi-targets ' . 
                    $chipseq_bed_files_multi_targets .
                  " --bowtie-path $bowtie_path" ;
    } elsif ( $chipseq_read_files_multi_targets ne '' ) { 
      $command .= ' --chipseq-read-files-multi-targets ' .
                    $chipseq_read_files_multi_targets .
                  " --bowtie-path $bowtie_path" ;
    }
  } else { ## ChIP-seq reads files from single source
    $command .= " --chipseq-target-read-files $chipseq_target_read_files " .
                " --bowtie-path $bowtie_path" ;
    if ( $chipseq_control_read_files ne '' ) {
     $command .= " --chipseq-control-read-files $chipseq_control_read_files";
    }
  }

  if ( $quiet ) {
      $command .= ' --quiet ';
  }

  $command .= " $refName $sampleName $statName $imdName";
  &runCommand($command);
}


if (!$keep_intermediate_files) {
    &runCommand("rm -rf $temp_dir", "Fail to delete the temporary folder!");
}


