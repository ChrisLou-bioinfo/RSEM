#!/bin/env python

__doc__="""

  pliu 20150510

  run pRSEM to calculate priors and use them for abundance estimation
"""

def main():
  import Gene
  import Param
  import Transcript

  argdict = getCommandLineArguments()

  param = Param.initFromCommandLineArguments(argdict)

 #if param.chipseq_peak_file is None:
 #  genChIPSeqPeakFileBySPPIDR(param) ## save to param.chipseq_peak_file

  trs = Transcript.readRSEMTI(param.fti)
  genes = Gene.constructGenesFromTranscripts(trs)

  training_genes = Gene.buildTrainingSet(genes, param)



def getCommandLineArguments():
  import argparse

  parser = argparse.ArgumentParser()
  parser.add_argument('--num-threads', type=int)
  parser.add_argument('--chipseq-target-read-files')
  parser.add_argument('--chipseq-control-read-files')
  parser.add_argument('--bowtie-bin-for-chipseq')
  parser.add_argument('--samtools-bin')
  parser.add_argument('--bedtools-bin-for-chipseq')
  parser.add_argument('--chipseq-peak-file')
  parser.add_argument('--mappability-bigwig-file')
  parser.add_argument('--quiet', action='store_true')

  ## need to be in the same order as feed in argument
  parser.add_argument('ref_name')
  parser.add_argument('sample_name')
  parser.add_argument('stat_name')
  parser.add_argument('imd_name')
  argdict = vars(parser.parse_args())

  return argdict


def genChIPSeqPeakFileBySPPIDR(param):
  import os
  import ChIPSeqExperiment

  os.environ['R_LIBS'] = "%s:%s" % (os.environ['R_LIBS'], param.prsem_rlib_dir)
  cse_target = ChIPSeqExperiment.initFromParam(param, 'target')
  cse_target.getFastqEncoding()
  cse_target.alignReadByBowtie()
  cse_target.poolTagAlign()

  if param.chipseq_control_read_files is not None:
    cse_control = ChIPSeqExperiment.initFromParam(param, 'control')
    cse_control.getFastqEncoding()
    cse_control.alignReadByBowtie()
    cse_control.poolTagAlign()
    cse_target.callPeaksBySPP(cse_control.pooled_tagalign)
    cse_target.getPeaksByIDR(cse_control.pooled_tagalign)

    param.chipseq_peak_file = cse_target.final_peaks.fullname
  else:
    pass  ## to-be-implemented, call peaks by MOSAICs


if __name__=='__main__':
  main()
